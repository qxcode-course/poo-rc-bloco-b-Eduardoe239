{
    "patches": [
        {
            "label": "2025-10-26_22-35-18",
            "content": "@@ -1,55 +0,0 @@\n-class Carregador:%0A    def __init__(self):%0A        pass%0A\n",
            "lines": "0"
        },
        {
            "label": "2025-10-27_23-15-14",
            "content": "@@ -36,16 +36,8 @@\n self\n-, P: int\n ):%0A \n@@ -47,419 +47,9 @@\n     \n-self.__potencia = P%0A%0A    def __str__(self):%0A        return f%22Carregador %7Bself.__potencia%7DW%22%0A    %0Aclass Bateria:%0A    def __init__(self, carga_max: int):%0A        self.carga_max = carga_max%0A        self.carga = carga_max%0A%0A    def usar(self, minutos: int):%0A        if self.carga == 0:%0A            return False%0A        self.carga -= minutos%0A        if self.carga %3C 0:%0A            self.carga = 0%0A        return True%0A    \n+pass\n %0A\n",
            "lines": "3"
        },
        {
            "label": "2025-10-28_00-02-55",
            "content": "@@ -470,2962 +470,4 @@\n    %0A\n-    def carregar(self, minutos: int, potencia: int):%0A        self.carga += minutos * potencia%0A        if self.carga %3E self.carga_max:%0A            self.carga = self.carga_max%0A    %0A    def __str__(self):%0A        return f%22Bateria %7Bself.carga%7D/%7Bself.carga_max%7D%22%0Aclass Notebook:%0A    def __init__(self):%0A        self.ligado = False%0A        self.tempo = 0%0A        self.carregador = None%0A        self.bateria = None%0A%0A    def ligar(self):%0A        if self.ligado:%0A            return%0A        if self.carregador is not None or (self.bateria is not None and self.bateria.carga %3E 0):%0A            self.ligado = True%0A        else:%0A            print(%22fail: n%C3%A3o foi poss%C3%ADvel ligar%22)%0A        %0A    def desligar(self):%0A        self.ligado = False%0A%0A    def usar(self, minuto: int):%0A        if not self.ligado:%0A            print(%22fail: desligado%22)%0A            return%0A        self.tempo += minuto%0A        if self.bateria is not None and self.carregador is None:%0A            if not self.bateria.usar(minuto):%0A                print(%22fail: descarregou%22)%0A                self.ligado = False%0A                return%0A            if self.bateria.carga == 0:%0A                print(%22fail: descarregou%22)%0A                self.ligado = False%0A            elif self.bateria is not None and self.carregador is not None:%0A                self.bateria.carregar(minuto, self.carregador.potencia)%0A            elif self.carregador is None and self.bateria is None:%0A                pass%0A%0A        def mostrar(self):%0A            estado = %22ligado%22 if self.ligado else %22desligado%22 %0A            msg = f%22Notebook: %7Bestado%7D%22%0A            if self.ligado:%0A                msg += f%22 por %7Bself.tempo%7D min%22%0A            if self.carregador is not None:%0A                msg += f%22,%7Bself.carregador%7D%22%0A            if self.bateria is not None:%0A                msg += f%22,%7Bself.bateria%7D%22%0A            print(msg)%0A%0A        def conectar_carregador(self, potencia: int):%0A            if self.carregador is not None:%0A                print(%22fail: carregador ja conectado%22)%0A            else:%0A                self.carregador = Carregador(potencia)%0A%0A        def remover_carregador(self):%0A            if self.carregador is None:%0A                print(%22fail: sem carregador%22)%0A            else:%0A                print(f%22Removido %7Bself.carregador.potencia%7DW%22)%0A                self.carregador = None%0A                if self.bateria is None:%0A                    self.ligado = False%0A%0A        def conectar_bateria(self, carga_max: int):%0A            if self.bateria is not None:%0A                print(%22fail: bateria j%C3%A1 conectada%22)%0A            else:%0A                self.bateria = Bateria(carga_max)%0A%0A        def remover_bateria(self):%0A            if self.bateria is None:%0A                print(%22fail: Sem bateria%22)%0A            else:%0A                print(%22Removido %7Bself.bateria.carga%7D/%7Bself.bateria.caraga_max%7D%22)%0A                self.bateria = None%0A                if self.carregador is None:%0A                    self.ligado = False%0A%0Adef main():%0A%0A\n",
            "lines": "20"
        },
        {
            "label": "2025-10-28_01-11-48",
            "content": "@@ -1907,16 +1907,20 @@\n   pass%0A%0A\n+    \n     def \n@@ -1926,32 +1926,36 @@\n  mostrar(self):%0A\n+    \n         estado =\n@@ -2001,24 +2001,28 @@\n o%22 %0A        \n+  \n+  \n msg = f%22Note\n@@ -2037,32 +2037,36 @@\n stado%7D%22%0A        \n+    \n if self.ligado:%0A\n@@ -2057,32 +2057,36 @@\n if self.ligado:%0A\n+    \n             msg \n@@ -2113,32 +2113,36 @@\n o%7D min%22%0A        \n+    \n if self.carregad\n@@ -2161,32 +2161,36 @@\n ne:%0A            \n+    \n msg += f%22,%7Bself.\n@@ -2202,32 +2202,36 @@\n gador%7D%22%0A        \n+  \n+  \n if self.bateria \n@@ -2247,32 +2247,36 @@\n ne:%0A            \n+    \n msg += f%22,%7Bself.\n@@ -2285,16 +2285,20 @@\n teria%7D%22%0A\n+    \n         \n@@ -3223,33 +3223,32 @@\n           print(\n-f\n %22Removido %7Bself.\n@@ -3411,16 +3411,16 @@\n  False%0A%0A\n+\n def main\n@@ -3426,871 +3426,6 @@\n n():\n-%0A    note = Notebook()%0A    while True:%0A        comando = input().strip().split()%0A        if len(comando) == 0:%0A            continue%0A        acao = comando%5B0%5D%0A        print(f%22$%7B''.join(comando)%7D%22)%0A        if acao == %22end%22:%0A            break%0A        elif acao == %22show%22:%0A            note.mostrar()%0A        elif acao == %22turn_on%22:%0A            note.ligar()%0A        elif acao == %22turn_off%22:%0A            note.desligar()%0A        elif acao == %22use%22:%0A            note.usar(int(comando%5B1%5D))%0A        elif acao == %22set_charger%22:%0A            note.conectar_carregador(int(comando%5B1%5D))%0A        elif acao == %22rm_charger%22:%0A            note.remover_carregador()%0A        elif acao == %22set_battery%22:%0A            note.conectar_bateria(int(comando%5B1%5D))%0A        elif acao == %22rm_battery%22:%0A            note.remover_bateria()%0A        else:%0A            print(%22fail:comando inv%C3%A1lido%22)%0A%0Amain()\n %0A%0A\n",
            "lines": "106"
        },
        {
            "label": "2025-10-28_02-44-05",
            "content": "@@ -3560,17 +3560,16 @@\n nt(f%22$%7B'\n- \n '.join(c\n@@ -4222,17 +4222,16 @@\n t(%22fail:\n- \n comando \n",
            "lines": "135"
        },
        {
            "label": "2025-10-28_02-45-46",
            "content": "@@ -30,32 +30,25 @@\n nit__(self, \n-potencia\n+P\n : int):%0A    \n@@ -52,24 +52,26 @@\n        self.\n+__\n potencia = p\n@@ -69,24 +69,17 @@\n encia = \n-potencia\n+P\n %0A%0A    de\n@@ -129,16 +129,18 @@\n r %7Bself.\n+__\n potencia\n@@ -143,17 +143,20 @@\n ncia%7DW%22%0A\n-%0A\n+    \n %0Aclass B\n@@ -461,16 +461,20 @@\n rn True%0A\n+    \n %0A    def\n@@ -632,32 +632,36 @@\n  self.carga_max%0A\n+    \n %0A    def __str__\n",
            "lines": "135"
        },
        {
            "label": "2025-10-28_02-47-29",
            "content": "@@ -1130,16 +1130,24 @@\n ligar%22)%0A\n+        \n %0A    def\n@@ -1209,33 +1209,32 @@\n sar(self, minuto\n-s\n : int):%0A        \n@@ -1329,33 +1329,32 @@\n .tempo += minuto\n-s\n %0A        if self\n@@ -1446,17 +1446,16 @@\n r(minuto\n-s\n ):%0A     \n@@ -1674,24 +1674,28 @@\n lse%0A        \n+    \n elif self.ba\n@@ -1749,32 +1749,36 @@\n ne:%0A            \n+    \n self.bateria.car\n@@ -1789,17 +1789,16 @@\n r(minuto\n-s\n , self.c\n@@ -1808,32 +1808,120 @@\n egador.potencia)\n+%0A            elif self.carregador is None and self.bateria is None:%0A                pass\n %0A%0A    def mostra\n@@ -1986,16 +1986,17 @@\n sligado%22\n+ \n %0A       \n@@ -2150,25 +2150,24 @@\n   msg += f%22,\n- \n %7Bself.carreg\n@@ -2232,17 +2232,16 @@\n g += f%22,\n- \n %7Bself.ba\n@@ -2268,16 +2268,20 @@\n t(msg)%0A%0A\n+    \n     def \n@@ -2322,32 +2322,36 @@\n : int):%0A        \n+ \n+   \n if self.carregad\n@@ -2358,32 +2358,36 @@\n or is not None:%0A\n+    \n             prin\n@@ -2407,17 +2407,17 @@\n egador j\n-%C3%A1\n+a\n  conecta\n@@ -2417,24 +2417,28 @@\n conectado%22)%0A\n+    \n         else\n@@ -2443,32 +2443,36 @@\n se:%0A            \n+    \n self.carregador \n@@ -2495,24 +2495,28 @@\n encia)%0A%0A    \n+   \n+ \n def remover_\n@@ -2533,32 +2533,36 @@\n (self):%0A        \n+    \n if self.carregad\n@@ -2577,32 +2577,36 @@\n ne:%0A            \n+ \n+   \n print(%22fail: Sem\n@@ -2602,17 +2602,17 @@\n (%22fail: \n-S\n+s\n em carre\n@@ -2619,38 +2619,46 @@\n gador%22)%0A        \n+  \n+  \n else:%0A\n+    \n             prin\n@@ -2704,32 +2704,36 @@\n W%22)%0A            \n+    \n self.carregador \n@@ -2743,32 +2743,36 @@\n one%0A            \n+   \n+ \n if self.bateria \n@@ -2788,32 +2788,36 @@\n                 \n+    \n self.ligado = Fa\n@@ -2821,24 +2821,28 @@\n  False%0A%0A    \n+ \n+   \n def conectar\n@@ -2865,32 +2865,36 @@\n arga_max: int):%0A\n+    \n         if self.\n@@ -2918,32 +2918,36 @@\n ne:%0A            \n+    \n print(%22fail: bat\n@@ -2966,38 +2966,46 @@\n ctada%22)%0A        \n+  \n+  \n else:%0A\n+    \n             self\n@@ -3035,16 +3035,20 @@\n a_max)%0A%0A\n+    \n     def \n@@ -3070,32 +3070,36 @@\n (self):%0A        \n+   \n+ \n if self.bateria \n@@ -3099,32 +3099,36 @@\n ateria is None:%0A\n+    \n             prin\n@@ -3150,38 +3150,46 @@\n teria%22)%0A        \n+    \n else:%0A\n+    \n             prin\n@@ -3235,24 +3235,25 @@\n .bateria.car\n+a\n ga_max%7D%22)%0A  \n@@ -3246,24 +3246,28 @@\n raga_max%7D%22)%0A\n+    \n             \n@@ -3290,32 +3290,36 @@\n one%0A            \n+  \n+  \n if self.carregad\n@@ -3322,32 +3322,36 @@\n egador is None:%0A\n+    \n                 \n",
            "lines": "136"
        },
        {
            "label": "2025-10-28_02-47-54",
            "content": "class Carregador:\n    def __init__(self, potencia: int):\n        self.potencia = potencia\n\n    def __str__(self):\n        return f\"Carregador {self.potencia}W\"\n\n\nclass Bateria:\n    def __init__(self, carga_max: int):\n        self.carga_max = carga_max\n        self.carga = carga_max\n\n    def usar(self, minutos: int):\n        if self.carga == 0:\n            return False\n        self.carga -= minutos\n        if self.carga < 0:\n            self.carga = 0\n        return True\n\n    def carregar(self, minutos: int, potencia: int):\n        self.carga += minutos * potencia\n        if self.carga > self.carga_max:\n            self.carga = self.carga_max\n\n    def __str__(self):\n        return f\"Bateria {self.carga}/{self.carga_max}\"\nclass Notebook:\n    def __init__(self):\n        self.ligado = False\n        self.tempo = 0\n        self.carregador = None\n        self.bateria = None\n\n    def ligar(self):\n        if self.ligado:\n            return\n        if self.carregador is not None or (self.bateria is not None and self.bateria.carga > 0):\n            self.ligado = True\n        else:\n            print(\"fail: n\u00e3o foi poss\u00edvel ligar\")\n\n    def desligar(self):\n        self.ligado = False\n\n    def usar(self, minutos: int):\n        if not self.ligado:\n            print(\"fail: desligado\")\n            return\n        self.tempo += minutos\n        if self.bateria is not None and self.carregador is None:\n            if not self.bateria.usar(minutos):\n                print(\"fail: descarregou\")\n                self.ligado = False\n                return\n            if self.bateria.carga == 0:\n                print(\"fail: descarregou\")\n                self.ligado = False\n        elif self.bateria is not None and self.carregador is not None:\n            self.bateria.carregar(minutos, self.carregador.potencia)\n\n    def mostrar(self):\n        estado = \"ligado\" if self.ligado else \"desligado\"\n        msg = f\"Notebook: {estado}\"\n        if self.ligado:\n            msg += f\" por {self.tempo} min\"\n        if self.carregador is not None:\n            msg += f\", {self.carregador}\"\n        if self.bateria is not None:\n            msg += f\", {self.bateria}\"\n        print(msg)\n\n    def conectar_carregador(self, potencia: int):\n        if self.carregador is not None:\n            print(\"fail: carregador j\u00e1 conectado\")\n        else:\n            self.carregador = Carregador(potencia)\n\n    def remover_carregador(self):\n        if self.carregador is None:\n            print(\"fail: Sem carregador\")\n        else:\n            print(f\"Removido {self.carregador.potencia}W\")\n            self.carregador = None\n            if self.bateria is None:\n                self.ligado = False\n\n    def conectar_bateria(self, carga_max: int):\n        if self.bateria is not None:\n            print(\"fail: bateria j\u00e1 conectada\")\n        else:\n            self.bateria = Bateria(carga_max)\n\n    def remover_bateria(self):\n        if self.bateria is None:\n            print(\"fail: Sem bateria\")\n        else:\n            print(f\"Removido {self.bateria.carga}/{self.bateria.carga_max}\")\n            self.bateria = None\n            if self.carregador is None:\n                self.ligado = False\n\ndef main():\n    note = Notebook()\n    while True:\n        comando = input().strip().split()\n        if len(comando) == 0:\n            continue\n        acao = comando[0]\n        print(f\"${' '.join(comando)}\")\n        if acao == \"end\":\n            break\n        elif acao == \"show\":\n            note.mostrar()\n        elif acao == \"turn_on\":\n            note.ligar()\n        elif acao == \"turn_off\":\n            note.desligar()\n        elif acao == \"use\":\n            note.usar(int(comando[1]))\n        elif acao == \"set_charger\":\n            note.conectar_carregador(int(comando[1]))\n        elif acao == \"rm_charger\":\n            note.remover_carregador()\n        elif acao == \"set_battery\":\n            note.conectar_bateria(int(comando[1]))\n        elif acao == \"rm_battery\":\n            note.remover_bateria()\n        else:\n            print(\"fail: comando inv\u00e1lido\")\n\nmain()\n\n",
            "lines": "134"
        }
    ]
}